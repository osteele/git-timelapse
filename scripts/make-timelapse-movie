#!/usr/bin/env python
"""
Make timelapse movie from image frames or text or script versions.

Usage:
  make-timelapse-movie [options] SOURCE_DIR

Options:
  -h --help        Show this screen.
  --cropped        Crop the input images.
  --duration=N     Target length in seconds.
  --frame-dir DIR  Store frames in DIR [default: frames].
  --linger=N       Repeat keyframe images N times [default: 1].
  --limit=N        Use only the first N keyframes.
  --interpolate=N  Add N interpolation frames between keyframes [default: 0].
"""

import io
import math
import os
import re
import shlex
import shutil
from fractions import gcd
from glob import glob

import numpy
import pygments
import pygments.lexers
import pygments.formatters
from docopt import docopt
from PIL import Image, ImageChops
from schema import Schema, And, Or, Use, SchemaError
from tqdm import tqdm

WHITE = (255, 255, 255)

movie_width, movie_height = 1024, 768

def text_file_to_image(file):
    lexer = pygments.lexers.get_lexer_for_filename(file)
    formatter = pygments.formatters.get_formatter_by_name('bmp', line_numbers=False)
    with open(file) as fd:
        data = pygments.highlight(fd.read(), lexer, formatter)
    return Image.open(io.BytesIO(data))

def read_file_image(file):
    try:
        return Image.open(file)
    except OSError as e:
        if 'cannot identify image file' not in str(e):
            raise e
        return text_file_to_image(file)

def cropped_image(im):
    bg = Image.new(im.mode, im.size, WHITE)
    diff = ImageChops.difference(im, bg)
    bbox = diff.getbbox()
    if bbox:
        return im.crop(bbox)
    return im

def layout_image(im, output_size):
    """Layout image im in multiple columns onto a new image with the same proportions."""
    source_width, source_height = im.size
    dest_frame = Image.new(im.mode, output_size, color=WHITE)
    output_width, output_height = output_size
    col_width, col_height = source_width, output_height
    source_y = 0
    dest_x = 0
    while source_y < source_height and dest_x < output_width:
        source_bottom = min(source_y + col_height, source_height)
        region = im.crop((0, source_y, source_width, source_bottom))
        dest_frame.paste(region, ((dest_x, 0, dest_x + col_width, source_bottom - source_y)))
        dest_x += col_width
        source_y = source_bottom
    return dest_frame

def iter_file_images(files, cropped=False, **kwargs):
    output_width, output_height = movie_width, movie_height
    min_scale = 0
    for file in files:
        im = read_file_image(file)
        if cropped:
            im = cropped_image(im)
        w, h = im.size
        frame_size = output_width, output_height
        scale = max(min_scale, math.sqrt(w * h / (output_width * output_height)))
        if scale > 1.0:
            ow, oh = w, math.ceil(output_height * w / output_width)
            scale = max(min_scale, math.ceil(math.sqrt(w * h / (ow * oh))))
            min_scale = scale
            frame_size = (scale * ow, scale * oh)
        im = layout_image(im, frame_size)
        yield im.resize((movie_width, movie_height), Image.ANTIALIAS)

def resize_images_to_lcm(im0, im1):
    """Resize im0 and im1 to the same size."""
    if im0.size == im1.size:
        return im0, im1
    w0, h0 = im0.size
    w1, h1 = im1.size
    assert w0 / h0 == w1 / h1
    s = w1 / gcd(w0, w1)
    w = int(s * w0)
    h = int(s * h0)
    size = (w, h)
    im0 = im0.resize(size, Image.ANTIALIAS)
    im1 = im1.resize(size, Image.ANTIALIAS)
    return im0, im1

def interpolate_frames(frames, interpolate=0, linger=1, **kwargs):
    prev_frame = None
    for frame in frames:
        if prev_frame and interpolate > 0:
            im0, im1 = resize_images_to_lcm(prev_frame, frame)
            for i in range(interpolate):
                s = i / interpolate
                ar = (1.0 - s) * numpy.asarray(im0) + s * numpy.asarray(im1)
                yield Image.fromarray(numpy.uint8(ar))
        for _ in range(linger):
            yield frame
        prev_frame = frame

def locate_child(file):
    if os.path.isdir(file):
        files = glob(os.path.join(file, '*'))
        if len(files) > 1:
            files.remove('stdout.txt')
        if len(files) == 1:
            return files[0]
    return file

def make_movie(source_dir, duration=None, frame_dir='frames', limit=None, **kwargs):
    # maybe someday these become parameters:
    skip_frame_generation = False
    movie_file = "timelapse.mp4"

    files = [locate_child(file) for file in sorted(glob(os.path.join(source_dir, '*')))]
    if limit:
        files = files[:limit]
    interpolate = kwargs['interpolate']
    linger = kwargs['linger']
    frame_count = len(files) * (interpolate + linger) - interpolate
    frame_pattern = os.path.join(frame_dir, "frame-{:0%sd}.tiff" % math.ceil(math.log(frame_count)/math.log(10)))

    if not skip_frame_generation:
        shutil.rmtree(frame_dir)
        os.makedirs(frame_dir, exist_ok=True)
        print(f"Reading {len(files)} key frames; writing {frame_count} output frames")
        t = tqdm(files)
        for i, frame in enumerate((interpolate_frames(iter_file_images(t, **kwargs), **kwargs))):
            outfile = frame_pattern.format(i)
            t.set_postfix(out=outfile)
            frame.save(outfile)

    frame_pattern = re.sub(r'\{:(.+?)\}', r'%\1', frame_pattern)
    fps = math.ceil( frame_count / duration) if duration else 10
    print(f'Writing {movie_file}...', end="")
    os.system(f"ffmpeg -r {fps} -loglevel warning -i {shlex.quote(frame_pattern)} -pix_fmt yuv420p -y {movie_file}")
    print('done.')

def parse_args():
    args = docopt(__doc__)
    schema = Schema({
        'SOURCE_DIR': And(os.path.exists, error='SOURCE_DIR should be a directory'),
        '--cropped': bool,
        '--duration': Or(None, Use(int)),
        '--frame-dir': str,
        '--help': bool,
        '--interpolate': Use(int),
        '--limit': Or(None, Use(int)),
        '--linger': Use(int),
    })
    try:
        args = schema.validate(args)
    except SchemaError as e:
        exit(e)
    return {re.sub(r'^--', '', k): v for k, v in args.items()}

if __name__ == '__main__':
    args = parse_args()
    make_movie(args['SOURCE_DIR'], **args)
